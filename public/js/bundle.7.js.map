{"version":3,"sources":["webpack:///./node_modules/create-react-class/index.js","webpack:///./node_modules/react-translate-component/index.js","webpack:///./node_modules/create-react-class/factory.js","webpack:///./node_modules/fbjs/lib/emptyObject.js","webpack:///./node_modules/fbjs/lib/invariant.js","webpack:///./node_modules/react-interpolate-component/index.js"],"names":["React","__webpack_require__","factory","Error","ReactNoopUpdateQueue","Component","updater","module","exports","isValidElement","PropTypes","createReactClass","Interpolate","translator","extend","translatorType","shape","getLocale","func","onLocaleChange","offLocaleChange","translate","keyType","oneOfType","string","arrayOf","Translate","displayName","contextTypes","scope","propTypes","locale","count","number","content","attributes","object","with","statics","textContentComponents","getDefaultProps","component","getInitialState","this","getTranslator","context","componentDidMount","props","localeChanged","componentWillUnmount","newLocale","setState","render","attributeKey","interpolate","indexOf","unsafe","interpolations","attributeTranslationOptions","state","contentTranslationOptions","fallback","name","translation","interpolateProps","children","createElement","key","options","bind","setLocale","registerTranslations","withTranslations","DecoratedComponent","translations","decoratedComponent","localeTranslations","scopedTranslations","childContextTypes","getChildContext","_assign","emptyObject","_invariant","MIXINS_KEY","ReactComponent","injectedMixins","ReactClassInterface","mixins","componentWillMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","updateComponent","ReactClassStaticInterface","getDerivedStateFromProps","RESERVED_SPEC_KEYS","Constructor","i","length","mixSpecIntoComponent","createMergedResultFunction","property","hasOwnProperty","isReserved","isAlreadyDefined","specPolicy","mixStaticSpecIntoComponent","autobind","validateMethodOverride","ReactClassMixin","spec","proto","prototype","autoBindPairs","__reactAutoBindPairs","isReactClassMethod","createChainedFunction","push","mergeIntoWithNoDuplicateKeys","one","two","undefined","a","apply","arguments","b","c","bindAutoBindMethod","method","IsMountedPreMixin","__isMounted","IsMountedPostMixin","replaceState","newState","callback","enqueueReplaceState","isMounted","ReactClassComponent","pairs","autoBindKey","bindAutoBindMethods","refs","initialState","Array","isArray","methodName","constructor","forEach","defaultProps","validateFormat","format","condition","d","e","f","error","args","argIndex","replace","framesToPop","invariant","except","isString","Object","toString","call","REGEXP","OMITTED_PROPS","parent","matches","split","reduce","memo","match","index","html","dangerouslySetInnerHTML","__html","child","concat"],"mappings":"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","file":"js/bundle.7.js?version=8d1977dc0e95bcc36501","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar React = require('react');\nvar factory = require('./factory');\n\nif (typeof React === 'undefined') {\n  throw Error(\n    'create-react-class could not find the React object. If you are using script tags, ' +\n      'make sure that React is being loaded before create-react-class.'\n  );\n}\n\n// Hack to grab NoopUpdateQueue from isomorphic React\nvar ReactNoopUpdateQueue = new React.Component().updater;\n\nmodule.exports = factory(\n  React.Component,\n  React.isValidElement,\n  ReactNoopUpdateQueue\n);\n","'use strict';\n\nvar React = require('react');\nvar PropTypes = require('prop-types');\nvar createReactClass = require('create-react-class');\nvar Interpolate = require('react-interpolate-component');\nvar translator = require('counterpart');\nvar extend = require('object-assign');\n\nvar translatorType = PropTypes.shape({\n  getLocale:        PropTypes.func,\n  onLocaleChange:   PropTypes.func,\n  offLocaleChange:  PropTypes.func,\n  translate:        PropTypes.func\n});\n\nvar keyType = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.arrayOf(PropTypes.string)\n]);\n\nvar Translate = createReactClass({\n  displayName: 'Translate',\n\n  contextTypes: {\n    translator: translatorType,\n    scope: keyType\n  },\n\n  propTypes: {\n    locale: PropTypes.string,\n    count:  PropTypes.number,\n    content: keyType,\n    scope: keyType,\n    attributes: PropTypes.object,\n    with: PropTypes.object\n  },\n\n  statics: {\n    textContentComponents: ['title', 'option', 'textarea']\n  },\n\n  getDefaultProps: function() {\n    return { component: 'span' };\n  },\n\n  getInitialState: function() {\n    return { locale: this.getTranslator().getLocale() };\n  },\n\n  getTranslator: function() {\n    return this.context.translator || translator;\n  },\n\n  componentDidMount: function() {\n    if (!this.props.locale) {\n      this.getTranslator().onLocaleChange(this.localeChanged);\n    }\n  },\n\n  componentWillUnmount: function() {\n    if (!this.props.locale) {\n      this.getTranslator().offLocaleChange(this.localeChanged);\n    }\n  },\n\n  localeChanged: function(newLocale) {\n    this.setState({ locale: newLocale });\n  },\n\n  render: function() {\n    var props           = extend({}, this.props);\n    var translator      = this.getTranslator();\n    var textContent     = Translate.textContentComponents.indexOf(props.component) > -1;\n    var interpolate     = textContent || props.unsafe === true;\n    var interpolations  = props.with;\n\n    var attributeKey;\n\n    var attributeTranslationOptions = extend(\n      { locale: this.state.locale, scope: this.context.scope },\n      props,\n      interpolations,\n      { interpolate: true }\n    );\n\n    var contentTranslationOptions = extend(\n      {},\n      attributeTranslationOptions,\n      { interpolate: interpolate }\n    );\n\n    delete props.locale;\n    delete props.scope;\n    delete props.count;\n    delete props.with;\n    delete props.fallback;\n\n    if (props.attributes) {\n      for (var name in props.attributes) {\n        attributeKey = props.attributes[name];\n\n        if (attributeKey) {\n          props[name] = translator.translate(attributeKey, attributeTranslationOptions);\n        }\n      }\n\n      delete props.attributes;\n    }\n\n    if (props.content) {\n      var translation      = translator.translate(props.content, contentTranslationOptions);\n      var interpolateProps = extend({}, props, { with: interpolations });\n\n      delete interpolateProps.content;\n      delete interpolateProps.children;\n\n      return React.createElement(Interpolate, interpolateProps, translation);\n    } else {\n      var component = props.component;\n\n      delete props.component;\n      delete props.unsafe;\n\n      return React.createElement(component, props);\n    }\n  }\n});\n\nmodule.exports = Translate;\n\nmodule.exports.translate = function(key, options) {\n  return React.createElement(Translate, extend({}, options, { content: key }));\n};\n\nmodule.exports.translatorType = translatorType;\n\nmodule.exports.getLocale = translator.getLocale.bind(translator);\nmodule.exports.setLocale = translator.setLocale.bind(translator);\nmodule.exports.onLocaleChange = translator.onLocaleChange.bind(translator);\nmodule.exports.offLocaleChange = translator.offLocaleChange.bind(translator);\nmodule.exports.registerTranslations = translator.registerTranslations.bind(translator);\n\nfunction withTranslations(DecoratedComponent, translations) {\n  if (!translations) {\n    return function(decoratedComponent) {\n      return withTranslations(decoratedComponent, DecoratedComponent);\n    };\n  }\n\n  var displayName =\n    DecoratedComponent.displayName ||\n    DecoratedComponent.name ||\n    'Component';\n\n  for (var locale in translations) {\n    var localeTranslations = translations[locale];\n    var scopedTranslations = {};\n\n    scopedTranslations[displayName] = localeTranslations;\n\n    translator.registerTranslations(locale, scopedTranslations);\n  }\n\n  return createReactClass({\n    displayName: displayName + 'WithTranslations',\n\n    childContextTypes: {\n      scope: keyType\n    },\n\n    getChildContext: function() {\n      return {\n        scope: displayName\n      };\n    },\n\n    render: function() {\n      return React.createElement(DecoratedComponent, this.props);\n    }\n  });\n}\n\nmodule.exports.withTranslations = withTranslations;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar _invariant = require('fbjs/lib/invariant');\n\nif (process.env.NODE_ENV !== 'production') {\n  var warning = require('fbjs/lib/warning');\n}\n\nvar MIXINS_KEY = 'mixins';\n\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n\n  var injectedMixins = [];\n\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillMount`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillReceiveProps`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillUpdate`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\n\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n\n  /**\n   * Similar to ReactClassInterface but for static methods.\n   */\n  var ReactClassStaticInterface = {\n    /**\n     * This method is invoked after a component is instantiated and when it\n     * receives new props. Return an object to update state in response to\n     * prop changes. Return null to indicate no change to state.\n     *\n     * If an object is returned, its keys will be merged into the existing state.\n     *\n     * @return {object || null}\n     * @optional\n     */\n    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\n  };\n\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n  var RESERVED_SPEC_KEYS = {\n    displayName: function(Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function(Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function(Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n      Constructor.childContextTypes = _assign(\n        {},\n        Constructor.childContextTypes,\n        childContextTypes\n      );\n    },\n    contextTypes: function(Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n      Constructor.contextTypes = _assign(\n        {},\n        Constructor.contextTypes,\n        contextTypes\n      );\n    },\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function(Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(\n          Constructor.getDefaultProps,\n          getDefaultProps\n        );\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function(Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function(Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function() {}\n  };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            typeof typeDef[propName] === 'function',\n            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n              'React.PropTypes.',\n            Constructor.displayName || 'ReactClass',\n            ReactPropTypeLocationNames[location],\n            propName\n          );\n        }\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name)\n      ? ReactClassInterface[name]\n      : null;\n\n    // Disallow overriding of base class methods unless explicitly allowed.\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(\n        specPolicy === 'OVERRIDE_BASE',\n        'ReactClassInterface: You are attempting to override ' +\n          '`%s` from your class specification. Ensure that your method names ' +\n          'do not overlap with React methods.',\n        name\n      );\n    }\n\n    // Disallow defining methods more than once unless explicitly allowed.\n    if (isAlreadyDefined) {\n      _invariant(\n        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\n        'ReactClassInterface: You are attempting to define ' +\n          '`%s` on your component more than once. This conflict may be due ' +\n          'to a mixin.',\n        name\n      );\n    }\n  }\n\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            isMixinValid,\n            \"%s: You're attempting to include a mixin that is either null \" +\n              'or not an object. Check the mixins included by the component, ' +\n              'as well as any mixins they include themselves. ' +\n              'Expected object but got %s.',\n            Constructor.displayName || 'ReactClass',\n            spec === null ? null : typeofSpec\n          );\n        }\n      }\n\n      return;\n    }\n\n    _invariant(\n      typeof spec !== 'function',\n      \"ReactClass: You're attempting to \" +\n        'use a component class or function as a mixin. Instead, just use a ' +\n        'regular object.'\n    );\n    _invariant(\n      !isValidElement(spec),\n      \"ReactClass: You're attempting to \" +\n        'use a component as a mixin. Instead, just use a regular object.'\n    );\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs;\n\n    // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind =\n          isFunction &&\n          !isReactClassMethod &&\n          !isAlreadyDefined &&\n          spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name];\n\n            // These cases should already be caught by validateMethodOverride.\n            _invariant(\n              isReactClassMethod &&\n                (specPolicy === 'DEFINE_MANY_MERGED' ||\n                  specPolicy === 'DEFINE_MANY'),\n              'ReactClass: Unexpected spec policy %s for key %s ' +\n                'when mixing in component specs.',\n              specPolicy,\n              name\n            );\n\n            // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n\n    for (var name in statics) {\n      var property = statics[name];\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = name in RESERVED_SPEC_KEYS;\n      _invariant(\n        !isReserved,\n        'ReactClass: You are attempting to define a reserved ' +\n          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n          'as an instance property instead; it will still be accessible on the ' +\n          'constructor.',\n        name\n      );\n\n      var isAlreadyDefined = name in Constructor;\n      if (isAlreadyDefined) {\n        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)\n          ? ReactClassStaticInterface[name]\n          : null;\n\n        _invariant(\n          specPolicy === 'DEFINE_MANY_MERGED',\n          'ReactClass: You are attempting to define ' +\n            '`%s` on your component more than once. This conflict may be ' +\n            'due to a mixin.',\n          name\n        );\n\n        Constructor[name] = createMergedResultFunction(Constructor[name], property);\n\n        return;\n      }\n\n      Constructor[name] = property;\n    }\n  }\n\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(\n      one && two && typeof one === 'object' && typeof two === 'object',\n      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n    );\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(\n          one[key] === undefined,\n          'mergeIntoWithNoDuplicateKeys(): ' +\n            'Tried to merge two objects with the same key: `%s`. This conflict ' +\n            'may be due to a mixin; in particular, this may be caused by two ' +\n            'getInitialState() or getDefaultProps() methods returning objects ' +\n            'with clashing keys.',\n          key\n        );\n        one[key] = two[key];\n      }\n    }\n    return one;\n  }\n\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis) {\n        for (\n          var _len = arguments.length,\n            args = Array(_len > 1 ? _len - 1 : 0),\n            _key = 1;\n          _key < _len;\n          _key++\n        ) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): React component methods may only be bound to the ' +\n                'component instance. See %s',\n              componentName\n            );\n          }\n        } else if (!args.length) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): You are binding a component method to the component. ' +\n                'React does this for you automatically in a high-performance ' +\n                'way, so you can safely remove this call. See %s',\n              componentName\n            );\n          }\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedPreMixin = {\n    componentDidMount: function() {\n      this.__isMounted = true;\n    }\n  };\n\n  var IsMountedPostMixin = {\n    componentWillUnmount: function() {\n      this.__isMounted = false;\n    }\n  };\n\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function(newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function() {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this.__didWarnIsMounted,\n          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\n            'subscriptions and pending requests in componentWillUnmount to ' +\n            'prevent memory leaks.',\n          (this.constructor && this.constructor.displayName) ||\n            this.name ||\n            'Component'\n        );\n        this.__didWarnIsMounted = true;\n      }\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function() {};\n  _assign(\n    ReactClassComponent.prototype,\n    ReactComponent.prototype,\n    ReactClassMixin\n  );\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function(props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this instanceof Constructor,\n          'Something is calling a React component directly. Use a factory or ' +\n            'JSX instead. See: https://fb.me/react-legacyfactory'\n        );\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (\n          initialState === undefined &&\n          this.getInitialState._isMockFunction\n        ) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      _invariant(\n        typeof initialState === 'object' && !Array.isArray(initialState),\n        '%s.getInitialState(): must return an object or null',\n        Constructor.displayName || 'ReactCompositeComponent'\n      );\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n    mixSpecIntoComponent(Constructor, spec);\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    );\n\n    if (process.env.NODE_ENV !== 'production') {\n      warning(\n        !Constructor.prototype.componentShouldUpdate,\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.componentWillRecieveProps,\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.UNSAFE_componentWillRecieveProps,\n        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +\n          'Did you mean UNSAFE_componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","'use strict';\n\nvar React = require('react');\nvar invariant = require('invariant');\nvar except = require('except');\nvar extend = require('object-assign');\nvar createReactClass = require('create-react-class');\n\nfunction isString(object) {\n  return Object.prototype.toString.call(object) === '[object String]';\n}\n\nvar REGEXP = /\\%\\((.+?)\\)s/;\nvar OMITTED_PROPS = ['children', 'format', 'component', 'unsafe', 'with'];\n\nvar Interpolate = createReactClass({\n  displayName: 'Interpolate',\n\n  getDefaultProps: function() {\n    return { component: 'span' };\n  },\n\n  render: function() {\n    var format         = this.props.children;\n    var parent         = this.props.component;\n    var unsafe         = this.props.unsafe === true;\n    var interpolations = extend({}, this.props, this.props.with);\n    var props          = except(this.props, OMITTED_PROPS);\n\n    var matches = [];\n    var children = [];\n\n    if (!isString(format)) {\n      format = this.props.format;\n    }\n\n    invariant(isString(format), 'Interpolate expects either a format string as only child or a `format` prop with a string value');\n\n    if (unsafe) {\n      var content = format.split(REGEXP).reduce(function(memo, match, index) {\n        var html;\n\n        if (index % 2 === 0) {\n          html = match;\n        } else {\n          html = interpolations[match];\n          matches.push(match);\n        }\n\n        if (React.isValidElement(html)) {\n          throw new Error('cannot interpolate a React component into unsafe text');\n        }\n\n        memo += html;\n\n        return memo;\n      }, '');\n\n      props.dangerouslySetInnerHTML = { __html: content };\n    } else {\n      format.split(REGEXP).reduce(function(memo, match, index) {\n        var child;\n\n        if (index % 2 === 0) {\n          if (match.length === 0) {\n            return memo;\n          }\n\n          child = match;\n        } else {\n          child = interpolations[match];\n          matches.push(match);\n        }\n\n        memo.push(child);\n\n        return memo;\n      }, children);\n    }\n\n    props = except(props, matches);\n\n    return React.createElement.apply(this, [parent, props].concat(children));\n  }\n});\n\nmodule.exports = Interpolate;\n"],"sourceRoot":""}